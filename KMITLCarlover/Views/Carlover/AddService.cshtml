@model IEnumerable<KMITL.Carlover.Models.AddServiceModel>
@*@model  Registermodel*@
@using Kendo.Mvc
@using System.Data
@using System.Linq
@using KMITL.Carlover.Models
@{
    ViewBag.Title = "AddService";
    var _CarloverController = "Carlover";
}

<script type="text/javascript">

    function OnRequestEnd(e) {
        if (e.type == "create" || e.type == "update") {
            var grid = $('#GridBan').data('kendoGrid');
            grid.dataSource.read();

        }
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    </script>

<div>
 
@(Html.Kendo().Grid(Model)
    .Name("GridBan")
    .Columns(columns =>
    {
        columns.Bound(p => p.ServiceID).Width(100).Hidden();
        columns.Bound(p => p.Service).Width(100).Title("Service");

        columns.Command(command =>
        {
            command.Edit()
               .Text("change")
               .UpdateText("save")
               .CancelText("cancel")
               .HtmlAttributes(new { title = "UpdateTooltip" });
            command.Destroy()
                .Text("Delete")
                .HtmlAttributes(new { title = "DeleteTooltip" });
        }).Title("Action").Width(150);
    }
    )
    .ToolBar(toolbar => toolbar.Create() .Text( "Create") .HtmlAttributes(new { title =  "CreateTooltip"}))
    .HtmlAttributes(new { style = "height: 700px;" })
    .Editable(editable => { editable.Mode(GridEditMode.InLine);  })
    .Sortable()
    .Scrollable()
    .Filterable()
    .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(5)
        .ServerOperation(false)
        .Events(events =>
            {
                events.Error("error_handler");  
                events.RequestEnd("OnRequestEnd");           
            })
        .Model(model => { 
            model.Id(p => p.ServiceID ); model.Field(p => p.ServiceID );
             
        })

                .Create(create => create.Action("MemberInsert", _CarloverController))
                .Read(read => read.Action("MemberSelect", _CarloverController))//.Type(HttpVerbs.Get))
                .Update(update => update.Action("MemberUpdate", _CarloverController))
                .Destroy(destroy => destroy.Action("MemberDelete", _CarloverController))
    )
)
</div>